resource_types:
- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

resources:

# Git

- name: ci
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry-incubator/greenhouse-ci.git

- name: windows2016fs-release-develop
  type: git
  source:
    branch: develop
    uri: git@github.com:cloudfoundry-incubator/windows2016fs-release.git
    private_key: {{CLOUDFOUNDRYINCUBATOR_WINDOWS2016FS_OFFLINE_DEPLOY_KEY}}

- name: windows2016fs-release-master
  type: git
  source:
    branch: master
    uri: git@github.com:cloudfoundry-incubator/windows2016fs-release.git
    private_key: {{CLOUDFOUNDRYINCUBATOR_WINDOWS2016FS_OFFLINE_DEPLOY_KEY}}

- name: windows2016fs-online-release-develop
  type: git
  source:
    branch: develop
    uri: git@github.com:cloudfoundry-incubator/windows2016fs-online-release.git
    private_key: {{CLOUDFOUNDRYINCUBATOR_WINDOWS2016FS_ONLINE_DEPLOY_KEY}}

- name: windows2016fs-online-release-master
  type: git
  source:
    branch: master
    uri: git@github.com:cloudfoundry-incubator/windows2016fs-online-release.git
    private_key: {{CLOUDFOUNDRYINCUBATOR_WINDOWS2016FS_ONLINE_DEPLOY_KEY}}

- name: windows2016fs
  type: git
  source:
    branch: master
    uri: git@github.com:cloudfoundry-incubator/windows2016fs.git
    private_key: {{CLOUDFOUNDRYINCUBATOR_WINDOWS2016FS_DEPLOY_KEY}}
    ignore_paths: [ Dockerfile ]

- name: windows2016fs-dockerfile
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry-incubator/windows2016fs.git
    paths: [ Dockerfile ]

# Docker Image

- name: windowsservercore
  type: docker-image
  source:
    repository: microsoft/windowsservercore
    tag: 1709

# GitHub Release

- name: git-setup
  type: github-release
  source:
    user: git-for-windows
    repository: git
    access_token: {{GREENHOUSE_CI_ACCESS_TOKEN}}

- name: windows2016fs-release-github-release
  type: github-release
  source:
    user: cloudfoundry-incubator
    repository: windows2016fs-release
    drafts: true
    access_token: {{GREENHOUSE_CI_ACCESS_TOKEN}}

- name: windows2016fs-online-release-github-release
  type: github-release
  source:
    user: cloudfoundry-incubator
    repository: windows2016fs-online-release
    drafts: true
    access_token: {{GREENHOUSE_CI_ACCESS_TOKEN}}

# S3

- name: tar
  type: s3
  source:
    bucket: bosh-windows-dependencies
    regexp: tar-(.*).exe
    access_key_id: {{BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID}}
    secret_access_key: {{BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY}}

- name: gcp-windows-stemcell
  type: s3
  source:
    bucket: all-bosh-windows
    regexp: 1709/tested/gcp/light-bosh-stemcell-(.*)-google-kvm-windows2016-go_agent.tgz
    access_key_id: ((BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID))
    secret_access_key: ((BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY))

- name: create-windows-rcs
  type: s3
  source:
    bucket: windows2016fs
    regexp: create-binaries/create-(.*)-windows-amd64.exe
    access_key_id: {{BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID}}
    secret_access_key: {{BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY}}

- name: create-windows-sha
  type: s3
  source:
    bucket: windows2016fs
    regexp: create-binaries/create-(.*)-windows-amd64.exe.sha256
    access_key_id: {{BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID}}
    secret_access_key: {{BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY}}

- name: create-linux-rcs
  type: s3
  source:
    bucket: windows2016fs
    regexp: create-binaries/create-(.*)-linux-amd64
    access_key_id: {{BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID}}
    secret_access_key: {{BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY}}

- name: create-linux-sha
  type: s3
  source:
    bucket: windows2016fs
    regexp: create-binaries/create-(.*)-linux-amd64.sha256
    access_key_id: {{BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID}}
    secret_access_key: {{BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY}}

# Semver

- name: image-version
  type: semver
  source:
    access_key_id: {{BOSH_WINDOWS_S3_ADMIN_ACCESS_KEY_ID}}
    secret_access_key: {{BOSH_WINDOWS_S3_ADMIN_SECRET_ACCESS_KEY}}
    bucket: windows2016fs
    initial_version: 0.0.19
    key: image-version
    region_name: us-east-1

- name: windows2016fs-release-version
  type: semver
  source:
    access_key_id: {{BOSH_WINDOWS_S3_ADMIN_ACCESS_KEY_ID}}
    secret_access_key: {{BOSH_WINDOWS_S3_ADMIN_SECRET_ACCESS_KEY}}
    bucket: windows2016fs
    initial_version: 0.0.6
    key: windows2016fs-release-version
    region_name: us-east-1

- name: windows2016fs-online-release-version
  type: semver
  source:
    access_key_id: {{BOSH_WINDOWS_S3_ADMIN_ACCESS_KEY_ID}}
    secret_access_key: {{BOSH_WINDOWS_S3_ADMIN_SECRET_ACCESS_KEY}}
    bucket: windows2016fs
    initial_version: 0.0.0
    key: windows2016fs-online-release-version
    region_name: us-east-1

# BOSH Deployment

- name: pesto-windows2016fs-online-deployment
  type: bosh-deployment
  source:
    deployment: windows2016fs-online-test
    target: {{PESTO_BOSH_ENVIRONMENT}}
    client: {{PESTO_BOSH_CLIENT}}
    client_secret: {{PESTO_BOSH_CLIENT_SECRET}}
    ca_cert: {{PESTO_BOSH_CA_CERT}}

# Lock Pool

- name: pesto-lock-pool
  type: pool
  source:
    branch: master
    pool: pesto
    private_key: {{GREENHOUSE-CI_SSH_KEY}}
    uri: git@github.com:greenhouse-ci/locks

groups:
- name: windows2016fs
  jobs:
    - test-windows2016fs-windows
    - test-windows2016fs-linux
    - bump-windows2016fs-release
    - bump-windows2016fs-online-release
    - build-and-push
- name: windows2016fs-release
  jobs:
    - build-create-release
    - test-create-release-windows
    - test-create-release-linux
    - ship-it-offline
    - bump-patch-version
- name: windows2016fs-online-release
  jobs:
    - pesto-online-release
    - ship-it-online

jobs:
- name: test-windows2016fs-windows
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: windows2016fs
      trigger: true
  - task: run-ginkgo-exe
    file: ci/test-windows2016fs-windows/task.yml
    params:
      NODES: 2

- name: test-windows2016fs-linux
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: windows2016fs
      trigger: true
  - task: run-ginkgo
    file: ci/test-windows2016fs-linux/task.yml
    params:
      IGNORE_PACKAGES: "cmd/extract,windows2016fs/image,windows2016fs/layer"

- name: bump-windows2016fs-release
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: windows2016fs-release-develop
    - get: windows2016fs
      passed:
      - test-windows2016fs-windows
      - test-windows2016fs-linux
      trigger: true
  - task: bump-windows2016fs-release
    file: ci/bump-submodule/task.yml
    params:
      SUBMODULE: "src/code.cloudfoundry.org/windows2016fs"
    input_mapping:
      source-repo: windows2016fs-release-develop
      module-repo: windows2016fs
  - task: update-blob
    file: ci/update-windows2016fs-blob/task.yml
    input_mapping:
      windows2016fs-release: bumped-repo
  - task: commit-changes
    file: ci/commit/task.yml
    input_mapping:
      repo: windows2016fs-release-updated-blob
    output_mapping:
      repo_with_commit: windows2016fs-release-updated-commit
    params:
      MESSAGE: "Updated image blob"
  - put: windows2016fs-release-develop
    params:
      repository: windows2016fs-release-updated-commit
      rebase: false

- name: bump-windows2016fs-online-release
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: windows2016fs-online-release-develop
    - get: windows2016fs
      passed:
      - test-windows2016fs-windows
      - test-windows2016fs-linux
      trigger: true
  - task: bump-windows2016fs-online-release
    file: ci/bump-submodule/task.yml
    params:
      SUBMODULE: "src/code.cloudfoundry.org/windows2016fs"
    input_mapping:
      source-repo: windows2016fs-online-release-develop
      module-repo: windows2016fs
  - put: windows2016fs-online-release-develop
    params:
      repository: bumped-repo
      rebase: true

- name: build-create-release
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: windows2016fs-release-develop
      trigger: true
  - put: windows2016fs-release-version
    params: {pre: rc}
  - task: build-create-release-binaries
    file: ci/build-create-release-binaries/task.yml
    input_mapping:
      version: windows2016fs-release-version
      windows2016fs-release: windows2016fs-release-develop
  - aggregate:
    - put: create-windows-rcs
      params:
        file: output/create-*-windows-amd64.exe
    - put: create-windows-sha
      params:
        file: output/create-*-windows-amd64.exe.sha256
    - put: create-linux-rcs
      params:
        file: output/create-*-linux-amd64
    - put: create-linux-sha
      params:
        file: output/create-*-linux-amd64.sha256

- name: test-create-release-windows
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: windows2016fs-release-develop
      trigger: true
      passed: [ build-create-release ]
    - get: windows2016fs-release-version
      passed: [ build-create-release ]
    - get: create-windows-sha
      passed: [ build-create-release ]
    - get: create-windows-rcs
      passed: [ build-create-release ]
  - aggregate:
    - task: create-dev-release
      file: ci/create-fs-release-windows/task.yml
      input_mapping:
        version: windows2016fs-release-version
        sha: create-windows-sha
        windows2016fs-release: windows2016fs-release-develop
      params:
        DEV_ENV: true
    - task: run-ginkgo-exe
      file: ci/run-ginkgo-exe/task.yml
      input_mapping: { repo: windows2016fs-release-develop}
      params:
        TEST_PATH: src/create
    - task: create-release
      file: ci/create-fs-release-windows/task.yml
      input_mapping:
        version: windows2016fs-release-version
        sha: create-windows-sha
        windows2016fs-release: windows2016fs-release-develop

- name: test-create-release-linux
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: windows2016fs-release-develop
      trigger: true
      passed: [ build-create-release ]
    - get: windows2016fs-release-version
      passed: [ build-create-release ]
    - get: create-linux-sha
      passed: [ build-create-release ]
    - get: create-linux-rcs
      passed: [ build-create-release ]
  - aggregate:
    - task: create-dev-release
      file: ci/create-fs-release-linux/task.yml
      input_mapping:
        version: windows2016fs-release-version
        sha: create-linux-sha
        windows2016fs-release: windows2016fs-release-develop
      params:
        DEV_ENV: true
    - task: run-ginkgo
      file: ci/run-ginkgo/task.yml
      input_mapping: { repo: windows2016fs-release-develop}
      params:
        TEST_PATH: src/create
    - task: create-release
      file: ci/create-fs-release-linux/task.yml
      input_mapping:
        version: windows2016fs-release-version
        sha: create-linux-sha
        windows2016fs-release: windows2016fs-release-develop


- name: pesto-online-release
  serial: true
  plan:
  - put: pesto-lock-pool
    params:
      acquire: true
  - aggregate:
      - get: ci
      - get: windows2016fs-online-release-develop
        trigger: true
      - get: gcp-windows-stemcell
  - task: create-windows2016fs-online-release
    file: ci/bosh-cr/task.yml
    input_mapping:
      release: windows2016fs-online-release-develop
    output_mapping:
      release-tarball: windows2016fs-online-tarball
  - put: pesto-windows2016fs-online-deployment
    params:
      manifest: ci/windows2016fs-online-manifest/manifest.yml
      stemcells:
      - gcp-windows-stemcell/*.tgz
      releases:
      - windows2016fs-online-tarball/*.tgz
      cleanup: true
    on_success:
      task: delete-deployment
      file: ci/bosh-deld/task.yml
      params:
        BOSH_CA_CERT: {{PESTO_BOSH_CA_CERT}}
        BOSH_CLIENT: {{PESTO_BOSH_CLIENT}}
        BOSH_CLIENT_SECRET: {{PESTO_BOSH_CLIENT_SECRET}}
        BOSH_DEPLOYMENT: windows2016fs-online-test
        BOSH_ENVIRONMENT: {{PESTO_BOSH_ENVIRONMENT}}
  ensure:
    put: pesto-lock-pool
    params:
      release: pesto-lock-pool

- name: ship-it-offline
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: windows2016fs-release-develop
      passed: [test-create-release-windows, test-create-release-linux]
    - get: windows2016fs-release-master
    - get: windows2016fs-release-version
      passed: [test-create-release-windows, test-create-release-linux]
      params: {bump: final}
    - get: create-linux-rcs
      passed: [test-create-release-linux]
    - get: create-linux-sha
      passed: [test-create-release-linux]
    - get: create-windows-rcs
      passed: [test-create-release-windows]
    - get: create-windows-sha
      passed: [test-create-release-windows]
  - task: promote-create-binaries
    file: ci/promote-create-binaries/task.yml
    input_mapping:
      version: windows2016fs-release-version
  - put: create-windows-rcs
    params:
      file: promoted-binaries/create-*-windows-amd64.exe
  - put: create-linux-rcs
    params:
      file: promoted-binaries/create-*-linux-amd64
  - task: update-version-and-shas
    file: ci/update-fs-release-version/task.yml
    input_mapping:
      windows2016fs-release: windows2016fs-release-develop
      version: windows2016fs-release-version
  - put: windows2016fs-release-develop
    params:
      repository: windows2016fs-release-updated-version
      tag: windows2016fs-release-version/version
      tag_prefix: v
  - put: windows2016fs-release-master
    params:
      repository: windows2016fs-release-updated-version
  - task: generate-github-release
    input_mapping:
      release: windows2016fs-release-updated-version
      version: windows2016fs-release-version
    file: ci/generate-github-release/task.yml
  - put: windows2016fs-release-github-release
    params:
      commitish: generated-release/commitish
      name: generated-release/name
      tag: generated-release/version
  - put: windows2016fs-release-version
    params:
      file: windows2016fs-release-version/version

- name: bump-patch-version
  serial: true
  plan:
  - get: windows2016fs-release-version
    trigger: true
    passed: [ship-it-offline]
    params:
      bump: patch
      pre: rc
  - put: windows2016fs-release-version
    params:
      file: windows2016fs-release-version/version

- name: ship-it-online
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: windows2016fs-online-release-develop
      passed: [pesto-online-release]
    - get: windows2016fs-online-release-master
    - put: windows2016fs-online-release-version
      params: {bump: patch}
  - task: finalize-release
    file: ci/finalize-release/task.yml
    input_mapping:
      release: windows2016fs-online-release-develop
      version: windows2016fs-online-release-version
    params:
      RELEASE_NAME: windows2016fs
      AWS_ACCESS_KEY_ID: {{BOSH_WINDOWS_BOSH_CI_S3_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: {{BOSH_WINDOWS_BOSH_CI_S3_SECRET_ACCESS_KEY}}
      CI_SKIP: true
  - put: windows2016fs-online-release-develop
    params:
      repository: finalized-release/release
      tag: windows2016fs-online-release-version/number
      tag_prefix: v
  - put: windows2016fs-online-release-master
    params:
      repository: finalized-release/release
  - task: generate-github-release
    input_mapping:
      release: finalized-repo
      version: windows2016fs-online-release-version
    file: ci/generate-github-release/task.yml
  - put: windows2016fs-online-release-github-release
    params:
      commitish: generated-release/commitish
      name: generated-release/name
      tag: generated-release/version
      globs:
      - finalized-release/windows2016fs-*.tgz

- name: build-and-push
  serial: true
  plan:
  - aggregate:
    - get: ci
    - get: windows2016fs
    - get: windowsservercore
      trigger: true
      params:
        save: false
        rootfs: false
        skip_download: true
    - get: windows2016fs-dockerfile
      trigger: true
    - get: git-setup
      trigger: true
      params:
        globs: [Git-*-64-bit.exe]
    - get: tar
      trigger: true
    - get: image-version
      params: {bump: patch}
  - task: build-and-push
    file: ci/docker-build-and-push/task.yml
    input_mapping:
      repo: windows2016fs-dockerfile
      version: image-version
    params:
      DOCKERFILE: repo/Dockerfile
      IMAGE_NAME: cloudfoundry/windows2016fs
      DOCKER_USERNAME: {{DOCKER_USERNAME}}
      DOCKER_PASSWORD: {{DOCKER_PASSWORD}}
  - task: update-image-tag
    file: ci/update-image-tag/task.yml
  - task: commit-changes
    file: ci/commit/task.yml
    input_mapping:
      repo: windows2016fs-updated
    output_mapping:
      repo_with_commit: windows2016fs-commit
    params:
      MESSAGE: "Updated image tag"
  - put: windows2016fs
    params:
      repository: windows2016fs-commit
      rebase: true
  - put: image-version
    params: {file: image-version/version}

